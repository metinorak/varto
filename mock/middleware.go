// Code generated by MockGen. DO NOT EDIT.
// Source: middleware.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	varto "github.com/metinorak/varto"
)

// MockMiddleware is a mock of Middleware interface.
type MockMiddleware struct {
	ctrl     *gomock.Controller
	recorder *MockMiddlewareMockRecorder
}

// MockMiddlewareMockRecorder is the mock recorder for MockMiddleware.
type MockMiddlewareMockRecorder struct {
	mock *MockMiddleware
}

// NewMockMiddleware creates a new mock instance.
func NewMockMiddleware(ctrl *gomock.Controller) *MockMiddleware {
	mock := &MockMiddleware{ctrl: ctrl}
	mock.recorder = &MockMiddlewareMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMiddleware) EXPECT() *MockMiddlewareMockRecorder {
	return m.recorder
}

// OnAddConnection mocks base method.
func (m *MockMiddleware) OnAddConnection(conn varto.Connection) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OnAddConnection", conn)
	ret0, _ := ret[0].(error)
	return ret0
}

// OnAddConnection indicates an expected call of OnAddConnection.
func (mr *MockMiddlewareMockRecorder) OnAddConnection(conn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnAddConnection", reflect.TypeOf((*MockMiddleware)(nil).OnAddConnection), conn)
}

// OnBroadcastToAll mocks base method.
func (m *MockMiddleware) OnBroadcastToAll(data []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OnBroadcastToAll", data)
	ret0, _ := ret[0].(error)
	return ret0
}

// OnBroadcastToAll indicates an expected call of OnBroadcastToAll.
func (mr *MockMiddlewareMockRecorder) OnBroadcastToAll(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnBroadcastToAll", reflect.TypeOf((*MockMiddleware)(nil).OnBroadcastToAll), data)
}

// OnPublish mocks base method.
func (m *MockMiddleware) OnPublish(topic string, data []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OnPublish", topic, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// OnPublish indicates an expected call of OnPublish.
func (mr *MockMiddlewareMockRecorder) OnPublish(topic, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnPublish", reflect.TypeOf((*MockMiddleware)(nil).OnPublish), topic, data)
}

// OnRemoveConnection mocks base method.
func (m *MockMiddleware) OnRemoveConnection(conn varto.Connection) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OnRemoveConnection", conn)
	ret0, _ := ret[0].(error)
	return ret0
}

// OnRemoveConnection indicates an expected call of OnRemoveConnection.
func (mr *MockMiddlewareMockRecorder) OnRemoveConnection(conn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnRemoveConnection", reflect.TypeOf((*MockMiddleware)(nil).OnRemoveConnection), conn)
}

// OnSubscribe mocks base method.
func (m *MockMiddleware) OnSubscribe(conn varto.Connection, topic string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OnSubscribe", conn, topic)
	ret0, _ := ret[0].(error)
	return ret0
}

// OnSubscribe indicates an expected call of OnSubscribe.
func (mr *MockMiddlewareMockRecorder) OnSubscribe(conn, topic interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnSubscribe", reflect.TypeOf((*MockMiddleware)(nil).OnSubscribe), conn, topic)
}

// OnUnsubscribe mocks base method.
func (m *MockMiddleware) OnUnsubscribe(conn varto.Connection, topic string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OnUnsubscribe", conn, topic)
	ret0, _ := ret[0].(error)
	return ret0
}

// OnUnsubscribe indicates an expected call of OnUnsubscribe.
func (mr *MockMiddlewareMockRecorder) OnUnsubscribe(conn, topic interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnUnsubscribe", reflect.TypeOf((*MockMiddleware)(nil).OnUnsubscribe), conn, topic)
}
