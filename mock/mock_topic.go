// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/metinorak/varto (interfaces: Topic)
//
// Generated by this command:
//
//	mockgen -destination=mock/mock_topic.go -package=mock github.com/metinorak/varto Topic
//

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	varto "github.com/metinorak/varto"
	gomock "go.uber.org/mock/gomock"
)

// MockTopic is a mock of Topic interface.
type MockTopic struct {
	ctrl     *gomock.Controller
	recorder *MockTopicMockRecorder
	isgomock struct{}
}

// MockTopicMockRecorder is the mock recorder for MockTopic.
type MockTopicMockRecorder struct {
	mock *MockTopic
}

// NewMockTopic creates a new mock instance.
func NewMockTopic(ctrl *gomock.Controller) *MockTopic {
	mock := &MockTopic{ctrl: ctrl}
	mock.recorder = &MockTopicMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTopic) EXPECT() *MockTopicMockRecorder {
	return m.recorder
}

// IsEmpty mocks base method.
func (m *MockTopic) IsEmpty() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsEmpty")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsEmpty indicates an expected call of IsEmpty.
func (mr *MockTopicMockRecorder) IsEmpty() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsEmpty", reflect.TypeOf((*MockTopic)(nil).IsEmpty))
}

// Publish mocks base method.
func (m *MockTopic) Publish(arg0 []byte) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Publish", arg0)
}

// Publish indicates an expected call of Publish.
func (mr *MockTopicMockRecorder) Publish(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockTopic)(nil).Publish), arg0)
}

// Subscribe mocks base method.
func (m *MockTopic) Subscribe(arg0 varto.Connection) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Subscribe", arg0)
}

// Subscribe indicates an expected call of Subscribe.
func (mr *MockTopicMockRecorder) Subscribe(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockTopic)(nil).Subscribe), arg0)
}

// Unsubscribe mocks base method.
func (m *MockTopic) Unsubscribe(arg0 varto.Connection) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Unsubscribe", arg0)
}

// Unsubscribe indicates an expected call of Unsubscribe.
func (mr *MockTopicMockRecorder) Unsubscribe(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unsubscribe", reflect.TypeOf((*MockTopic)(nil).Unsubscribe), arg0)
}
