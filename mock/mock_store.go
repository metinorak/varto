// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/metinorak/varto (interfaces: Store)
//
// Generated by this command:
//
//	mockgen -destination=mock/mock_store.go -package=mock github.com/metinorak/varto Store
//

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	varto "github.com/metinorak/varto"
	gomock "go.uber.org/mock/gomock"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
	isgomock struct{}
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// AddConnection mocks base method.
func (m *MockStore) AddConnection(conn varto.Connection) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddConnection", conn)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddConnection indicates an expected call of AddConnection.
func (mr *MockStoreMockRecorder) AddConnection(conn any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddConnection", reflect.TypeOf((*MockStore)(nil).AddConnection), conn)
}

// AddTopic mocks base method.
func (m *MockStore) AddTopic(name string) (varto.Topic, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTopic", name)
	ret0, _ := ret[0].(varto.Topic)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddTopic indicates an expected call of AddTopic.
func (mr *MockStoreMockRecorder) AddTopic(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTopic", reflect.TypeOf((*MockStore)(nil).AddTopic), name)
}

// GetAllConnections mocks base method.
func (m *MockStore) GetAllConnections() ([]varto.Connection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllConnections")
	ret0, _ := ret[0].([]varto.Connection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllConnections indicates an expected call of GetAllConnections.
func (mr *MockStoreMockRecorder) GetAllConnections() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllConnections", reflect.TypeOf((*MockStore)(nil).GetAllConnections))
}

// GetTopic mocks base method.
func (m *MockStore) GetTopic(name string) (varto.Topic, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTopic", name)
	ret0, _ := ret[0].(varto.Topic)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTopic indicates an expected call of GetTopic.
func (mr *MockStoreMockRecorder) GetTopic(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTopic", reflect.TypeOf((*MockStore)(nil).GetTopic), name)
}

// RemoveConnection mocks base method.
func (m *MockStore) RemoveConnection(conn varto.Connection) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveConnection", conn)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveConnection indicates an expected call of RemoveConnection.
func (mr *MockStoreMockRecorder) RemoveConnection(conn any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveConnection", reflect.TypeOf((*MockStore)(nil).RemoveConnection), conn)
}

// RemoveTopic mocks base method.
func (m *MockStore) RemoveTopic(name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveTopic", name)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveTopic indicates an expected call of RemoveTopic.
func (mr *MockStoreMockRecorder) RemoveTopic(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveTopic", reflect.TypeOf((*MockStore)(nil).RemoveTopic), name)
}
